–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è (enum) –≤ C#
enum (–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ) ‚Äî —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç.

 –°–æ–∑–¥–∞–Ω–∏–µ enum
‚úÖ –ü—Ä–∏–º–µ—Ä:

public enum WeaponType
{
    Sword,  // 0
    Bow,    // 1
    Axe     // 2
}

–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è —á–∏—Å–ª–æ, –Ω–∞—á–∏–Ω–∞—è —Å 0.

WeaponType playerWeapon = WeaponType.Bow;
Debug.Log(playerWeapon); // –í—ã–≤–µ–¥–µ—Ç: Bow

–Ø–≤–Ω–æ–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
–ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —Å–≤–æ–∏ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:

public enum Difficulty
{
    Easy = 1,
    Normal = 2,
    Hard = 3
}

–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ enum ‚áÑ int
üîπ –ò–∑ enum –≤ int:

int weaponID = (int)WeaponType.Axe; // 2
üîπ –ò–∑ int –≤ enum:

WeaponType weapon = (WeaponType)1;
Debug.Log(weapon); // Bow

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Flags (–±–∏—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)
–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è enum, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–ª–∞–≥ Flags.

[System.Flags]
public enum PlayerState
{
    Idle = 1,      // 0001
    Running = 2,   // 0010
    Jumping = 4,   // 0100
    Attacking = 8  // 1000
}
üîπ –ö–æ–º–±–∏–Ω–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π:

PlayerState state = PlayerState.Running | PlayerState.Jumping;
Debug.Log(state); // Running, Jumping
üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è:

if ((state & PlayerState.Jumping) == PlayerState.Jumping)
{
    Debug.Log("–ò–≥—Ä–æ–∫ –ø—Ä—ã–≥–∞–µ—Ç!");
}