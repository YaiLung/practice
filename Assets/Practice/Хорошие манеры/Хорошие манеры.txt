–•–æ—Ä–æ—à–∏–µ –º–∞–Ω–µ—Ä—ã –≤ C# (Best Practices)
–ü—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–¥–∞ –≤–∞–∂–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å —á–∏—Å—Ç—ã–π —Å—Ç–∏–ª—å, –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã –∏ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏. –í–æ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –∫–æ–¥–∞ –≤ C#:

1. –ò–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –º–µ—Ç–æ–¥–æ–≤ üè∑Ô∏è
üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CamelCase –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –ø–æ–ª–µ–π (private int healthPoints;)
üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ PascalCase –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤ (public void StartGame() {})
üîπ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∏ –º–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞

‚úÖ –•–æ—Ä–æ—à–æ:

int maxHealth = 100;  
string playerName = "Oleg";  
‚ùå –ü–ª–æ—Ö–æ:
int mh = 100; // –ß—Ç–æ —Ç–∞–∫–æ–µ mh?
string pn = "Oleg"; // –ù–µ–ø–æ–Ω—è—Ç–Ω–æ!
2. –ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Ç–∞–µ–º—ã–º üëÄ
üîπ –†–∞–∑–±–∏–≤–∞–π—Ç–µ –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–±–µ–ª—ã –∏ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
üîπ –î–æ–±–∞–≤–ª—è–π—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Ç–∞–º, –≥–¥–µ –∫–æ–¥ –Ω–µ–æ—á–µ–≤–∏–¥–µ–Ω

‚úÖ –•–æ—Ä–æ—à–æ:

if (health < 20)  
{
    Debug.Log("Low health!");
}
‚ùå –ü–ª–æ—Ö–æ:

if(health<20){Debug.Log("Low health!");}
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ var, –Ω–æ —Å —É–º–æ–º ü§î
üîπ var –ø–æ–ª–µ–∑–µ–Ω, –∫–æ–≥–¥–∞ —Ç–∏–ø –æ—á–µ–≤–∏–¥–µ–Ω
üîπ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ var, –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ–ø–æ–Ω—è—Ç–µ–Ω –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

‚úÖ –•–æ—Ä–æ—à–æ:

var enemy = new Enemy(); // –û—á–µ–≤–∏–¥–Ω–æ, —á—Ç–æ —ç—Ç–æ –æ–±—ä–µ–∫—Ç Enemy
‚ùå –ü–ª–æ—Ö–æ:

var x = GetData(); // –ö–∞–∫–æ–π —Ç–∏–ø –≤–µ—Ä–Ω—ë—Ç GetData()?
4. –°–ª–µ–¥–∏—Ç–µ –∑–∞ null –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ NullReferenceException üö®
üîπ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –æ–±—ä–µ–∫—Ç—ã –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
üîπ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ?? (–æ–ø–µ—Ä–∞—Ç–æ—Ä –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Å null)

‚úÖ –•–æ—Ä–æ—à–æ:

string message = playerName ?? "Guest"; // –ï—Å–ª–∏ playerName null, –±—É–¥–µ—Ç "Guest"
‚ùå –ü–ª–æ—Ö–æ:

int length = message.Length; // –ï—Å–ª–∏ message = null, –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞!
5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ readonly –∏ const —Ç–∞–º, –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ üîí
üîπ const ‚Äì –¥–ª—è –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏)
üîπ readonly ‚Äì –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏–π, –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ

‚úÖ –•–æ—Ä–æ—à–æ:

const float Gravity = 9.8f;  
readonly int maxPlayers;  
‚ùå –ü–ª–æ—Ö–æ:

int gravity = 9; // –ù–µ–æ—á–µ–≤–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
6. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ async/await –≤–º–µ—Å—Ç–æ Thread.Sleep ‚è≥
üîπ await Task.Delay() –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫
üîπ Thread.Sleep() –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ª–∞–≥–∏

‚úÖ –•–æ—Ä–æ—à–æ:

async Task LoadGameAsync()
{
    await Task.Delay(1000); // –û–∂–∏–¥–∞–Ω–∏–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    Debug.Log("Game Loaded!");
}
‚ùå –ü–ª–æ—Ö–æ:

Thread.Sleep(1000); // –ë–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫!
7. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ using –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ üóëÔ∏è
üîπ –£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
üîπ –†–∞–±–æ—Ç–∞–µ—Ç —Å IDisposable

‚úÖ –•–æ—Ä–æ—à–æ:

using (StreamWriter writer = new StreamWriter("log.txt"))  
{
    writer.WriteLine("Log entry");
} // writer.Dispose() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
‚ùå –ü–ª–æ—Ö–æ:

StreamWriter writer = new StreamWriter("log.txt");  
writer.WriteLine("Log entry");  
writer.Close(); // –ú–æ–∂–Ω–æ –∑–∞–±—ã—Ç—å –≤—ã–∑–≤–∞—Ç—å Close()
8. –ù–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ª–∏—à–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã –≤ —Ü–∏–∫–ª–∞—Ö üîÑ
üîπ –í—ã–Ω–æ—Å–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Ü–∏–∫–ª–∞

‚úÖ –•–æ—Ä–æ—à–æ:

List<int> numbers = new List<int>();
for (int i = 0; i < 100; i++)
{
    numbers.Add(i);
}
‚ùå –ü–ª–æ—Ö–æ:

for (int i = 0; i < 100; i++)
{
    List<int> numbers = new List<int>(); // –°–æ–∑–¥–∞—ë—Ç 100 –æ–±—ä–µ–∫—Ç–æ–≤!
    numbers.Add(i);
}
9. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ foreach, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è for üîÅ
üîπ foreach —É–¥–æ–±–Ω–µ–µ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π

‚úÖ –•–æ—Ä–æ—à–æ:

foreach (var enemy in enemies)  
{
    enemy.TakeDamage(10);
}
‚ùå –ü–ª–æ—Ö–æ:

for (int i = 0; i < enemies.Count; i++)  
{
    enemies[i].TakeDamage(10);
}
10. –†–∞–∑–¥–µ–ª—è–π—Ç–µ –ª–æ–≥–∏–∫—É –ø–æ –∫–ª–∞—Å—Å–∞–º (SOLID) üèóÔ∏è
üîπ –ö–∞–∂–¥—ã–π –∫–ª–∞—Å—Å –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É
üîπ –ò–∑–±–µ–≥–∞–π—Ç–µ God-–∫–ª–∞—Å—Å–æ–≤

‚úÖ –•–æ—Ä–æ—à–æ (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏):

class Player  
{
    public void Move() { /* –î–≤–∏–∂–µ–Ω–∏–µ */ }
}

class Inventory  
{
    public void AddItem(Item item) { /* –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ */ }
}
‚ùå –ü–ª–æ—Ö–æ (–≤—Å—ë –≤ –æ–¥–Ω–æ–º –∫–ª–∞—Å—Å–µ):


class Player  
{
    public void Move() { /* –î–≤–∏–∂–µ–Ω–∏–µ */ }
    public void AddItem(Item item) { /* –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –≤ –∫–ª–∞—Å—Å–µ –∏–≥—Ä–æ–∫–∞ */ }
}
11. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ string.Format, –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é –∏–ª–∏ StringBuilder –¥–ª—è —Å—Ç—Ä–æ–∫ ‚úçÔ∏è
üîπ –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è (+) –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞

‚úÖ –•–æ—Ä–æ—à–æ:

string message = $"–ü—Ä–∏–≤–µ—Ç, {playerName}!"; // –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è  
‚ùå –ü–ª–æ—Ö–æ:

string message = "–ü—Ä–∏–≤–µ—Ç, " + playerName + "!"; // –ú–µ–¥–ª–µ–Ω–Ω–µ–µ
12. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ private set –¥–ª—è –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö üîê
üîπ –ü–æ–ª—è –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞

‚úÖ –•–æ—Ä–æ—à–æ:

public class Player  
{
    public int Score { get; private set; } = 0; // –ò–∑–º–µ–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞
}
‚ùå –ü–ª–æ—Ö–æ:

public int Score = 0; // –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–∑–≤–Ω–µ!